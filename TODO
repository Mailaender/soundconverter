 
bugs:

 * better progress, in the statusbar
 * encoders as plugins 
 * optional "advanced" encoder settings
 * HIG compliant interface
 * handle exceptions even when they happen in callbacks
 * add support for GNOME encoding profiles ?
   GNOME profiles are "recording oriented", so maybe we need
   our own profile system. "lossless, voice, etc..."
 * bug: the program's options aren't printed with --help


 -ok- autotools, l12n
 -ok- give time estimates for progress bar
 -ok- progress dialog
 -ok- find a solution when no tags & filename generated from tags
 -ok- don't add dupplicate files 
 -ok- dropping a list a folder does not work as expected
 -ok- handle error when overwriting a file
 -ok- bug: the dialog can only be showed once
 -ok- use a raw quality setting
 -ok- display aprox. bitrate
 -ok- choose dir, add recursively input files that need to be converted

-------------------------------------------------------------------------------

 - change TaskQueue, for a better, multithreaded one.
 - change BackgroundTask not to use timeout(), but an event-based system.
 + simplify the file/folder adding.
 - write test scripts

Only call gui stuff from main thread, but create threads to start Pipelines.

When using threads with BackgroundTask, we have problems updating the UI...
Maybe we should use dogtail from some more tests.


------------------------------------------------------------------------------

Cahier des charges
==================

Pipeline n'herite plus de BackgroundTask, mais d'un nouveau a part.
Possibilité de lancer des commandes gst pour le début.

Encodeurs en plugins

Pipeline est dans un thread.
PipelineQueue dans un thread aussi

Il faut:
	* identifier les fichiers supportés, le plus vite possible (typefind+decodebin ?)
	* ajouter a la liste
	* lire les tags
	* convertir la liste

gestion de la progression.
  tant qu'il y'a des fichiers en attente dans typequeue ou tagqueue : pulse

Points d'entrées:
  Ajout d'un fichier (typequeue) -> typefind  (tagqueue)-> tagread (encodequeue)
  Convertion de encodequeue

  Et ne pas oublier la conversion en batch.
  -> objet queue global ?

Objects
=======

Gestion de l'ajout des fichiers dans la liste -> plus tard !

Pipeline
*pas* dans un thread
derive de gst.Pipeline
	play(gst-launch)
	stop()
	on_error(), on_setup(), on_finish()
	lenght

Task
	ready
	work()
	

ThreadedQueue
	size, expected_size, processed_size, thread_method, thread_numbers 	
	start(), stop()

	total_lenght, position

	utiliser Queue.Queue ?

Une queue pour chaque tache ? (typefind/tagread/converter)
Une queue global qui gère les 3 autres ?


Migration
=========

Faire un client  séparé avec juste backgroundtask + gst-launch ?

Refaire  une version sans validation des fichiers a l'ajout.
puis changer le backgroundtask pour lancer une commande gst-launch.


Commencer par la version batch ?

Nouvelle version:
* 


Progression
===========
Apparement ça fonctionne avec juste le Converter
Testé avec 150+ fichiers divers vers ogg vorbis.




